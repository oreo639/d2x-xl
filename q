./physics/collide.cpp:			Die ();	// info.xLifeLeft = 1;
./physics/collide.cpp:	Die ();	// info.xLifeLeft = 1;
./physics/collide.cpp:	info.xLifeLeft = min (xDist / 64, I2X (1));
./physics/physics.cpp:					info.xLifeLeft = 0;
./weapons/fireweapon.cpp:if (objP->info.xLifeLeft == ONE_FRAME_TIME) {
./weapons/fireweapon.cpp:		objP->info.xLifeLeft = OMEGA_MULTI_LIFELEFT;
./weapons/fireweapon.cpp:		objP->info.xLifeLeft = 0;
./weapons/dropweapon.cpp:		objP->info.xLifeLeft = (d_rand() + I2X (3)) * 64;		//	Lives for 3 to 3.5 binary minutes (a binary minute is 64 seconds)
./weapons/dropweapon.cpp:		//	objP->info.xLifeLeft = (d_rand() + I2X (3)) * 64;		//	Lives for 5 to 5.5 binary minutes (a binary minute is 64 seconds)
./weapons/controlweapon.cpp:			bombP->info.xLifeLeft = 1;
./weapons/controlweapon.cpp:					bombP->info.xLifeLeft = 1;
./weapons/omega.cpp:		objP->info.xLifeLeft = ONE_FRAME_TIME;
./render/objrender.cpp:info.xLifeLeft = IMMORTAL_TIME;
./ai/aiboss.cpp:objP->info.xLifeLeft = I2X (30) + (I2X (1) / 2) * (gameStates.app.nDifficultyLevel * 15);	//	Gated in robots only live 30 seconds.
./objects/powerup.cpp:			objP->info.xLifeLeft = -1;	//make orb disappear if touched by opposing team CPlayerData
./objects/reactor.cpp:		objP->info.xLifeLeft = IMMORTAL_TIME;
./objects/robot.cpp:		objP->info.xLifeLeft = IMMORTAL_TIME;
./objects/robot.cpp:		objP->info.xLifeLeft = IMMORTAL_TIME;
./objects/object.cpp:gameData.objs.consoleP->info.xLifeLeft = IMMORTAL_TIME;
./objects/createobject.cpp:objP->info.xLifeLeft = IMMORTAL_TIME;
./objects/createobject.cpp:		objP->info.xLifeLeft = I2X (extraGameInfo [1].entropy.nVirusLifespan);
./objects/createobject.cpp:	objP->info.xLifeLeft = IMMORTAL_TIME;
./objects/objectio.cpp:info.xLifeLeft = cf.ReadFix ();   
./objects/objectio.cpp:	info.xLifeLeft = IMMORTAL_TIME;
./objects/updateobject.cpp:				gameData.objs.guidedMissile [gameData.multiplayer.nLocalPlayer].objP->info.xLifeLeft = 0;
./objects/updateobject.cpp:		info.xLifeLeft = 0;
./main/dropobject.cpp:					objP->info.xLifeLeft = (d_rand () + I2X (3)) * 64;		//	Lives for 3 to 3.5 binary minutes (a binary minute is 64 seconds)
./main/dropobject.cpp://							objP->info.xLifeLeft = (d_rand () + I2X (3)) * 64;		//	Lives for 5 to 5.5 binary minutes (a binary minute is 64 seconds)
./main/dropobject.cpp:		blobObjP->info.xLifeLeft = xLifeTime;
./main/wall.cpp:	objP->info.xLifeLeft = I2X (1)/8;
./main/wall.cpp:			objP->info.xLifeLeft = I2X (1)/8;
./main/wall.cpp:			objP->info.xLifeLeft = I2X (1)/8;
./main/newdemo.cpp:	objP->info.xLifeLeft = NDReadFix ();
./main/newdemo.cpp:	objP->info.xLifeLeft = (fix) b;
./main/newdemo.cpp:	objP->info.xLifeLeft = (fix) ((int) objP->info.xLifeLeft << 12);
./main/vclip.cpp:	objP->info.xLifeLeft = IMMORTAL_TIME;
./main/game.cpp:	objP->info.xLifeLeft = I2X (100) + d_rand () * 4;
./main/fuelcen.cpp:	OBJECTS [nObject].info.xLifeLeft = MATCEN_LIFE;
./main/fuelcen.cpp:	objP->info.xLifeLeft = IMMORTAL_TIME;
./main/fuelcen.cpp:		objP->info.xLifeLeft = IMMORTAL_TIME;
./gameio/loadgame.cpp:objP->info.xLifeLeft = IMMORTAL_TIME;
./gameio/gamesave.cpp:objP->info.xLifeLeft = IMMORTAL_TIME;		//all loaded CObject are immortal, for now
./lighting/lightcluster.cpp:		objP->info.xLifeLeft = 0;
./lighting/lightcluster.cpp:	OBJECTS [nObject].info.xLifeLeft = IMMORTAL_TIME;
./lighting/lightcluster.cpp:	lightObjP->info.xLifeLeft = objP->info.xLifeLeft;
./network/netmisc-old.cpp:objP->info.xLifeLeft = INTEL_INT (objP->info.xLifeLeft);
./network/netmisc-new.cpp:objP->info.xLifeLeft = INTEL_INT (objP->info.xLifeLeft);
./effects/fireball.cpp:objP->info.xLifeLeft = BLAST_LIFE;
./effects/fireball.cpp://		objP->info.xLifeLeft = 3 * BLAST_LIFE / 2;
./effects/fireball.cpp:objP->info.xLifeLeft = IMMORTAL_TIME;
./effects/fireball.cpp:explObjP->info.xLifeLeft = gameData.eff.vClips [0][nVClip].xTotalTime;
./effects/fireball.cpp:info.xLifeLeft = I2X (nDebrisLife [8]) + 3 * DEBRIS_LIFE / 4 + FixMul (d_rand (), DEBRIS_LIFE);	//	Some randomness, so they don't all go away at the same time.
./effects/fireball.cpp:info.xLifeLeft = I2X (nDebrisLife [gameOpts->render.nDebrisLife]) + 3 * DEBRIS_LIFE / 4 + FixMul (d_rand (), DEBRIS_LIFE);	//	Some randomness, so they don't all go away at the same time.
./effects/fireball.cpp:	objP->info.xLifeLeft = delayTime;
./effects/fireball.cpp:	info.xLifeLeft = 0;
./effects/shrapnel.cpp:	objP->info.xLifeLeft = m_info.xLife;
./effects/shrapnel.cpp:objP->info.xLifeLeft = 0;
